main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance)))
# variable importance pie chart for better visual dislay of importance
importance_4 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_4, 2))
test_data_rand$Top_15 <- as.factor(test_data_rand$Top_15)
# Predict class labels (Top_20) for test_data
predictions <- predict(first_tree_model, newdata = test_data_rand, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_rand$Top_15)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
# Train the decision tree using rpart
second_tree_model <- rpart(Top_20 ~ +  Log_GDP + Social_support + Life_expectancy +  Freedom_of_choices + Generosity + Corruption + Dystopia_and_residual             ,data = train_data_rand, method = "class")
rpart.plot(second_tree_model)
importance <- second_tree_model$variable.importance
pie(importance,
main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance)))
# variable importance pie chart for better visual dislay of importance
importance_5 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_5, 2))
test_data_rand$Top_20 <- as.factor(test_data_rand$Top_20)
# Predict class labels (Top_20) for test_data
predictions <- predict(second_tree_model, newdata = test_data_rand, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_rand$Top_20)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
third_tree_model <- rpart(Top_25 ~  Log_GDP + Social_support + Life_expectancy +  Freedom_of_choices + Generosity + Corruption + Dystopia_and_residual             ,data = train_data_rand, method = "class")
rpart.plot(third_tree_model)
importance <- third_tree_model$variable.importance
pie(importance,
main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance)))
# variable importance pie chart for better visual dislay of importance
importance_6 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_6, 2))
test_data_rand$Top_25 <- as.factor(test_data_rand$Top_25)
# Predict class labels (Top_20) for test_data
predictions <- predict(third_tree_model, newdata = test_data_rand, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_rand$Top_25)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
null_countries <- c("Angola", "Bhutan", "Syria", "Djibouti", "Oman", "Guyana",
"Puerto Rico", "Qatar", "Somaliland Region", "Suriname", "Sudan", "Syria")
happiness_data <- happiness_data %>%
filter(!(Country_name %in% null_countries))
set.seed(123)
happiness_data <- happiness_data[sample(nrow(happiness_data)), ]
sample <- sample(c(TRUE, FALSE), nrow(happiness_data), replace=TRUE, prob=c(0.8,0.2))
train  <- happiness_data[sample, ]
test   <- happiness_data[!sample, ]
cols <- c("Log_GDP", "Social_support", "Life_expectancy", "Freedom_of_choices", "Generosity", "Corruption", "Dystopia_and_residual")
predictors <- paste(cols, collapse = " + ")
log_formula <- as.formula(paste("Top_20 ~", predictors))
log_formula
logmodel <- glm(log_formula,
data = train, family = "binomial")
probs <- predict(logmodel, newdata = test, type = "response")
preds <- ifelse(probs > 0.5, 1, 0)
test$Top_20 <- as.integer(test$Top_20 == TRUE)
test$preds <- preds
actual <- factor(test$Top_20, levels = c(0, 1))
predicted <- factor(test$preds, levels = c(0, 1))
cm <- confusionMatrix(predicted, actual)
print(cm)
modimportance_1<-varImp(logmodel)
print(modimportance_1)
# Split data by year
train_data <- subset(happiness_data, Year < 2022)
test_data <- subset(happiness_data, Year >= 2022)
# Ensure binary format for Top_20 in both datasets
train_data$Top_20 <- as.integer(train_data$Top_20 == TRUE)
test_data$Top_20 <- as.integer(test_data$Top_20 == TRUE)
# Define predictor columns
cols <- c("Log_GDP", "Social_support", "Life_expectancy",
"Freedom_of_choices", "Generosity",
"Corruption", "Dystopia_and_residual")
# Create formula dynamically
predictors <- paste(cols, collapse = " + ")
log_formula <- as.formula(paste("Top_20 ~", predictors))
# Train logistic regression on train_data
logmodel <- glm(log_formula, data = train_data, family = "binomial")
# Predict on test_data
probs <- predict(logmodel, newdata = test_data, type = "response")
preds <- ifelse(probs > 0.5, 1, 0)
# Add predictions to test_data
test_data$preds <- preds
# Create factors for evaluation
actual <- factor(test_data$Top_20, levels = c(0, 1))
predicted <- factor(test_data$preds, levels = c(0, 1))
# Confusion matrix
cm <- confusionMatrix(predicted, actual)
print(cm)
modimportance_2<-varImp(logmodel)
print(modimportance_2)
# chronological trees
importance_tree_1 <- (importance_1 + importance_2 + importance_3) / 3
# Convert to percentages
importance_tree_1 <- importance_tree_1 / sum(importance_tree_1) * 100
importance_tree_1 <- round(importance_tree_1, 2)
print(importance_tree_1)
# random trees
importance_tree_2 <- (importance_4 + importance_5 + importance_6) / 3
# Convert to percentages
importance_tree_2 <- importance_tree_2 / sum(importance_tree_2) * 100
importance_tree_2 <- round(importance_tree_2, 2)
print(importance_tree_2)
importance_log <- (modimportance_1+modimportance_2) / 2
importance_log <- importance_log / sum(importance_log) * 100
importance_log <- round(importance_log, 2)
print(importance_log)
#average factor importance
corruption = (36.28+36.11+13.24)/3=28.54
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(caret)
library(pROC)
library(rpart.plot)
library(readxl)  # a libary for loading excel files
library(tibble)
happiness_data <- read_csv("happiness_data_clean_2011_2024.csv")#load data
happiness_data <- happiness_data %>%
mutate(`Country name` = trimws(`Country name`))
happiness_data <- happiness_data %>%
group_by(`Country name`) %>%
fill(
`Ladder score`, upperwhisker, lowerwhisker,
`Explained by: Log GDP per capita`, `Explained by: Social support`,
`Explained by: Healthy life expectancy`, `Explained by: Freedom to make life choices`,
`Explained by: Generosity`, `Explained by: Perceptions of corruption`,
`Dystopia + residual`,
.direction = "downup"
) %>%
ungroup()
# erasure of non existent countries
happiness_data <- happiness_data %>%
filter(!is.na(`Ladder score`)) # use only complete data(without null values)
happiness_data <- happiness_data %>%
group_by(Year) %>%
mutate(Top_20 = Rank <= 20) %>%# create a new top_20 column
mutate(Top_15 = Rank <= 15) %>%# create a new top_15 column
mutate(Top_25 = Rank <= 25) %>%# create a new top_25 column
ungroup() %>%
#renaming the column in order to be usable in R
rename(Country_name = `Country name`, Ladder_score = `Ladder score`, Log_GDP = `Explained by: Log GDP per capita`, Social_support = `Explained by: Social support`, Life_expectancy = `Explained by: Healthy life expectancy`, Freedom_of_choices = `Explained by: Freedom to make life choices`, Generosity = `Explained by: Generosity`, Dystopia_and_residual = `Dystopia + residual`, Corruption = `Explained by: Perceptions of corruption` )
happiness_data <- happiness_data %>%
arrange(Country_name, Year) %>%  # Sort by country and year
group_by(Country_name) %>%      # Process each country separately
mutate(Top20_Last = lag(Top_20)) %>%  # Get last year's Top_20 and create new column
ungroup() %>%  # Remove grouping
mutate(Top20_Last = case_when(
is.na(Top20_Last) ~ 2,         # No previous data
Top20_Last == 1 ~ 1,           # Was in top 20
Top20_Last == 0 ~ 0            # Was not in top 20
))
# count Top_20 appearences by country
top_countries_long <- happiness_data %>%
filter(Top_20) %>%
count(Country_name, name = "Years_in_Top_20") %>%
arrange(desc(Years_in_Top_20))
tpl1 <- top_countries_long %>%
filter(Years_in_Top_20 >= 5) %>%
ggplot(aes(x = reorder(Country_name, Years_in_Top_20), y = Years_in_Top_20)) +
geom_col(fill = "lightgreen") +
coord_flip() +
labs(
title = "Number of Years Each Country was in the Top 20",
x = "Country",
y = "Years in Top 20"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
plt1 <- ggplot(happiness_data, aes(x = Social_support, y = Ladder_score)) +
geom_point(alpha=0.4) +
geom_smooth(method="lm", se=FALSE, color="blue") +
labs(title="Ladder score vs Social support")
plt <- ggplot(happiness_data, aes(x=Rank)) + geom_histogram(color="darkblue", fill="lightblue", binwidth=3) +
labs(title="Distribution of rankings")+
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
tpl1 | plt
# Split data
train_data_chron <- subset(happiness_data, Year < 2022)
test_data_chron <- subset(happiness_data, Year >= 2022)
first_tree_model <- rpart(
Top_15 ~ Year + Log_GDP + Social_support + Life_expectancy +
Freedom_of_choices + Generosity + Corruption + Dystopia_and_residual,
data = train_data_chron,
method = "class"
)
rpart.plot(first_tree_model)# the tree
importance_1 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
pie(importance_1,
main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance_1)))
# variable importance pie chart for better visual disפlay of importance
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_1, 2))
test_data_chron$Top_15 <- as.factor(test_data_chron$Top_15)
# Predict class labels (Top_20) for test_data
predictions <- predict(first_tree_model, newdata = test_data_chron, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_chron$Top_15)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
# Train the decision tree using rpart
second_tree_model <- rpart(Top_20 ~  Year +  Log_GDP + Social_support + Life_expectancy +  Freedom_of_choices + Generosity + Corruption + Dystopia_and_residual             ,data = train_data_chron, method = "class")
rpart.plot(second_tree_model)
importance <- second_tree_model$variable.importance
pie(importance,
main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance)))
# variable importance pie chart for better visual dislay of importance
importance_2 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_2, 2))
test_data_chron$Top_20 <- as.factor(test_data_chron$Top_20)
# Predict class labels (Top_20) for test_data
predictions <- predict(second_tree_model, newdata = test_data_chron, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_chron$Top_20)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
third_tree_model <- rpart(Top_25 ~  Year +  Log_GDP + Social_support + Life_expectancy +  Freedom_of_choices + Generosity + Corruption + Dystopia_and_residual             ,data = train_data_chron, method = "class")
rpart.plot(third_tree_model)
importance <- third_tree_model$variable.importance
pie(importance,
main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance)))
# variable importance pie chart for better visual dislay of importance
importance_3 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_3, 2))
test_data_chron$Top_25 <- as.factor(test_data_chron$Top_25)
# Predict class labels (Top_20) for test_data
predictions <- predict(third_tree_model, newdata = test_data_chron, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_chron$Top_25)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
happiness_data <- happiness_data[sample(nrow(happiness_data)), ]#take the happiness data
sample <- sample(c(TRUE, FALSE), nrow(happiness_data), replace=TRUE, prob=c(0.8,0.2))# split the data 80-20
train_data_rand  <- happiness_data[sample, ]
test_data_rand   <- happiness_data[!sample, ]
first_tree_model <- rpart(
Top_15 ~ Log_GDP + Social_support + Life_expectancy +
Freedom_of_choices + Generosity + Corruption + Dystopia_and_residual,
data = train_data_rand,
method = "class"
)
rpart.plot(first_tree_model)# the tree
importance <- first_tree_model$variable.importance# variable importance scores
pie(importance,
main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance)))
# variable importance pie chart for better visual dislay of importance
importance_4 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_4, 2))
test_data_rand$Top_15 <- as.factor(test_data_rand$Top_15)
# Predict class labels (Top_20) for test_data
predictions <- predict(first_tree_model, newdata = test_data_rand, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_rand$Top_15)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
# Train the decision tree using rpart
second_tree_model <- rpart(Top_20 ~ +  Log_GDP + Social_support + Life_expectancy +  Freedom_of_choices + Generosity + Corruption + Dystopia_and_residual             ,data = train_data_rand, method = "class")
rpart.plot(second_tree_model)
importance <- second_tree_model$variable.importance
pie(importance,
main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance)))
# variable importance pie chart for better visual dislay of importance
importance_5 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_5, 2))
test_data_rand$Top_20 <- as.factor(test_data_rand$Top_20)
# Predict class labels (Top_20) for test_data
predictions <- predict(second_tree_model, newdata = test_data_rand, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_rand$Top_20)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
third_tree_model <- rpart(Top_25 ~  Log_GDP + Social_support + Life_expectancy +  Freedom_of_choices + Generosity + Corruption + Dystopia_and_residual             ,data = train_data_rand, method = "class")
rpart.plot(third_tree_model)
importance <- third_tree_model$variable.importance
pie(importance,
main = "Variable Importance (Decision Tree)",
col = rainbow(length(importance)))
# variable importance pie chart for better visual dislay of importance
importance_6 <- sort(first_tree_model$variable.importance, decreasing = TRUE)# variable importance scores
# Print the variable importance table
cat("Variable Importance (numeric values):\n")
print(round(importance_6, 2))
test_data_rand$Top_25 <- as.factor(test_data_rand$Top_25)
# Predict class labels (Top_20) for test_data
predictions <- predict(third_tree_model, newdata = test_data_rand, type = "class")
# Confusion matrix
conf_matrix <- table(Predicted = predictions, Actual = test_data_rand$Top_25)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Test Accuracy:", round(accuracy, 4), "\n")
null_countries <- c("Angola", "Bhutan", "Syria", "Djibouti", "Oman", "Guyana",
"Puerto Rico", "Qatar", "Somaliland Region", "Suriname", "Sudan", "Syria")
happiness_data <- happiness_data %>%
filter(!(Country_name %in% null_countries))
set.seed(123)
happiness_data <- happiness_data[sample(nrow(happiness_data)), ]
sample <- sample(c(TRUE, FALSE), nrow(happiness_data), replace=TRUE, prob=c(0.8,0.2))
train  <- happiness_data[sample, ]
test   <- happiness_data[!sample, ]
cols <- c("Log_GDP", "Social_support", "Life_expectancy", "Freedom_of_choices", "Generosity", "Corruption", "Dystopia_and_residual")
predictors <- paste(cols, collapse = " + ")
log_formula <- as.formula(paste("Top_20 ~", predictors))
log_formula
logmodel <- glm(log_formula,
data = train, family = "binomial")
probs <- predict(logmodel, newdata = test, type = "response")
preds <- ifelse(probs > 0.5, 1, 0)
test$Top_20 <- as.integer(test$Top_20 == TRUE)
test$preds <- preds
actual <- factor(test$Top_20, levels = c(0, 1))
predicted <- factor(test$preds, levels = c(0, 1))
cm <- confusionMatrix(predicted, actual)
print(cm)
modimportance_1<-varImp(logmodel)
print(modimportance_1)
# Split data by year
train_data <- subset(happiness_data, Year < 2022)
test_data <- subset(happiness_data, Year >= 2022)
# Ensure binary format for Top_20 in both datasets
train_data$Top_20 <- as.integer(train_data$Top_20 == TRUE)
test_data$Top_20 <- as.integer(test_data$Top_20 == TRUE)
# Define predictor columns
cols <- c("Log_GDP", "Social_support", "Life_expectancy",
"Freedom_of_choices", "Generosity",
"Corruption", "Dystopia_and_residual")
# Create formula dynamically
predictors <- paste(cols, collapse = " + ")
log_formula <- as.formula(paste("Top_20 ~", predictors))
# Train logistic regression on train_data
logmodel <- glm(log_formula, data = train_data, family = "binomial")
# Predict on test_data
probs <- predict(logmodel, newdata = test_data, type = "response")
preds <- ifelse(probs > 0.5, 1, 0)
# Add predictions to test_data
test_data$preds <- preds
# Create factors for evaluation
actual <- factor(test_data$Top_20, levels = c(0, 1))
predicted <- factor(test_data$preds, levels = c(0, 1))
# Confusion matrix
cm <- confusionMatrix(predicted, actual)
print(cm)
modimportance_2<-varImp(logmodel)
print(modimportance_2)
# chronological trees
importance_tree_1 <- (importance_1 + importance_2 + importance_3) / 3
# Convert to percentages
importance_tree_1 <- importance_tree_1 / sum(importance_tree_1) * 100
importance_tree_1 <- round(importance_tree_1, 2)
print(importance_tree_1)
# random trees
importance_tree_2 <- (importance_4 + importance_5 + importance_6) / 3
# Convert to percentages
importance_tree_2 <- importance_tree_2 / sum(importance_tree_2) * 100
importance_tree_2 <- round(importance_tree_2, 2)
print(importance_tree_2)
importance_log <- (modimportance_1+modimportance_2) / 2
importance_log <- importance_log / sum(importance_log) * 100
importance_log <- round(importance_log, 2)
print(importance_log)
#average factor importance
#corruption = (36.28+36.11+13.24)/3=28.54
#Dystopia_and_residual = (16.80+15.21+29.38)/3=20.46
#Log_GDP=(7.20+12.31+21.57)/3=13.69
#Social_support=(11.76+ 6.17+16.12)/3=11.35
#Life_expectancy=(15.58+ 12.11+5.41)/3=11.03
#Freedom_of_choices=(11.24+ 12.76+4.39)/3=9.463
#Generosity =(1.14+5.34+9.89)/3=5.56
# Example data (replace with your actual vectors)
corruption <- c(tree_1 = 36.24, tree_2 = 36.11, log = 13.24,avg=28.54)
Dystopia_and_residual <- c(tree_1 = 16.8, tree_2 = 15.21, log = 29.38,avg=20.46)
Log_GDP <- c(tree-1 = 7.2, tree_2 = 12.31, log = 21.57,avg=13.69)
library(dplyr)
happiness_data <- read.csv("C:/Users/Roni/Documents/merged_whr_data.csv")
library(dplyr)
happiness_data <- read.csv("merged_whr_data.csv")
library(dplyr)
happiness_data <- read.csv("C:/Users/Niv Dolev/Documents/merged_whr_data.csv")
summary(happiness_data)
happiness_data <- happiness_data %>%
filter(!is.na(Average..annual.))
# list of countries and the columns that have at least 3 nulls
nulls <- happiness_data %>% select(-Healthy.life.expectancy, -Year, -Average..annual., -Average..annual..rank) %>%
group_by(Country) %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "na_{.col}")) %>%
pivot_longer(cols = -Country,
names_to = "column",
values_to = "na_count") %>%
filter(na_count >= 3)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(caret)
library(pROC)
library(rpart.plot)
library(readxl)  # a libary for loading excel files
library(dplyr)
happiness_data <- read.csv("C:/Users/Niv Dolev/Documents/merged_whr_data.csv")
summary(happiness_data)
happiness_data <- happiness_data %>%
filter(!is.na(Average..annual.))
# list of countries and the columns that have at least 3 nulls
nulls <- happiness_data %>% select(-Healthy.life.expectancy, -Year, -Average..annual., -Average..annual..rank) %>%
group_by(Country) %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "na_{.col}")) %>%
pivot_longer(cols = -Country,
names_to = "column",
values_to = "na_count") %>%
filter(na_count >= 3)
happiness_data <- happiness_data %>%
mutate(`Country name` = trimws(`Country name`))
library(dplyr)
happiness_data <- read.csv("C:/Users/Niv Dolev/Documents/merged_whr_data.csv")
summary(happiness_data)
happiness_data <- happiness_data %>%
filter(!is.na(Average..annual.))
# list of countries and the columns that have at least 3 nulls
nulls <- happiness_data %>% select(-Healthy.life.expectancy, -Year, -Average..annual., -Average..annual..rank) %>%
group_by(Country) %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "na_{.col}")) %>%
pivot_longer(cols = -Country,
names_to = "column",
values_to = "na_count") %>%
filter(na_count >= 3)
happiness_data <- happiness_data %>%
mutate(`Country name` = trimws(`Country name`))
whrdata = read.csv("C:/Users/Roni/Documents/merged_whr_data.csv")
whrdata = read.csv("C:/Users/Niv Dolev/Documents/merged_whr_data.csv")
whrdata <- whrdata %>%
group_by(Year) %>%
mutate(Top_20 = Average..annual..rank <= 20) %>%# create a new top_20 column
mutate(Top_15 = Average..annual..rank <= 15) %>%# create a new top_15 column
mutate(Top_25 = Average..annual..rank <= 25) %>%# create a new top_25 column
ungroup()
whrdata
blue_countries <- c("Finland", "Denmark", "Iceland", "Sweden", "Netherlands")
red_countries  <- c("Madagascar", "Zambia", "Ethiopia", "Sri Lanka", "Bangladesh")
selected_countries <- c(blue_countries, red_countries)
# Filter data
filtered_data <- whrdata %>%
filter(Country %in% selected_countries) %>%
arrange(-Year)
# Add a color group variable
filtered_data <- filtered_data %>%
mutate(Group = ifelse(Country %in% blue_countries, "Blue", "Red"))
filtered_data
lineplot<-ggplot(filtered_data, aes(x = Year, y = Average..annual..rank, color = Group, group = Country)) +
geom_line(size = 1) +
geom_point() +
scale_color_manual(values = c("Blue" = "blue", "Red" = "red")) +
labs(title = "Donations Over Time (Selected Countries)",
x = "Year", y = "Donated") +
theme_minimal()
lineplot
